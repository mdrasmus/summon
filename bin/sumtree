#!/usr/bin/env python-i
#
# SUMTREE (SUMMON Tree Visualizer)
#
# see summon/examples/sumtree/view_*.sh for examples
#


# python libs
import optparse
import sys

# summon libs
from summon.core import *
from summon import sumtree
from summon import util
from summon import treelib


# command line options
o = optparse.OptionParser()


g = optparse.OptionGroup(o, "Data options")
o.add_option_group(g)

g.add_option("-p", "--ptree", dest="ptree", metavar="<ptree file>",
             help="load a tree in parent tree format")
g.add_option("-l", "--labels", dest="labels", metavar="<leaf labels file>",
             help="give leaf labels for parent tree format")
g.add_option("-n", "--newick", dest="newick", metavar="<newick file>",
             help="load a tree in newick format")

g = optparse.OptionGroup(o, "Display options")
o.add_option_group(g)

g.add_option("-c", "--colormap", dest="colormap", metavar="<tree color map>",
             help="specify how to color branches of a tree")
g.add_option("-t", "--usedist", dest="usedist", metavar="<distance factor>",
             default=1.0,
             type="float",
             help="use distance information in tree (newick only)")
g.add_option("-L", "--noshowlabels", dest="noshowlabels",
             action="store_true",
             default=False,
             help="disable leaf labels")
g.add_option("", "--layout", dest="layout", metavar="default|hierarchical",
             default="default",
             help="specifies how to layout the tree for drawing")
g.add_option("-V", "--vertical", dest="vertical",
             action="store_true",
             default=False,
             help="display tree vertically")
g.add_option("-w", "--winsize", dest="winsize",
             metavar="<window width>x<window height>",
             help="set initial window size")



# parse args
conf, args = o.parse_args()


#======================================================================
# Reading and Initialization
#



def read_tree(conf):
    util.tic("reading input")

    tree = treelib.Tree()

    if conf.ptree:
        tree.read_parent_tree(conf.ptree, conf.labels)
        print "%s: %d nodes, %d leaves\n" % \
          (conf.ptree, len(tree.nodes), len(tree.leaves()))
        
        
    elif conf.newick:
        tree.read_newick(conf.newick)
        print "%s: %d nodes, %d leaves\n" % \
          (conf.newick, len(tree.nodes), len(tree.leaves()))

    util.toc()    
    return tree


#=============================================================================
# title
print "SUMTREE (SUMMON Tree Visualizer)"
print "Matt Rasmussen 2005-2008"
print

# read
tree = read_tree(conf)

# display tree
if conf.newick:
    filename = conf.newick
elif conf.ptree:
    filename = conf.ptree
    conf.usedist = 0

if conf.colormap:
    colormap = treelib.read_tree_color_map(conf.colormap)
else:
    colormap = None

if conf.winsize:
    winsize = map(int, conf.winsize.split("x"))
else:
    winsize = (400, 400)

minlen = -util.INF
if conf.usedist == 0.0:
    minlen = 1.0
    conf.usedist = 1.0

if conf.layout == "default":
    layout = treelib.layoutTree(tree, conf.usedist, -1.0, 
                                minlen=minlen)
elif conf.layout == "hierarchical":
    layout = treelib.layoutTreeHierarchical(tree, conf.usedist, -1.0)
else:
    raise Exception("unknown tree layout")


vis = sumtree.SumTree(tree, name=filename, xscale=conf.usedist, 
                      showLabels=not conf.noshowlabels,
                      vertical=conf.vertical,
                      colormap=colormap,
                      winsize=winsize,
                      layout=layout)
util.tic("drawing tree")
vis.show()
util.toc()



# export a few functions to the global scope
def find(name):
    return vis.find(name)

def mark(boxColor = color(1,0,0), **options):
    return vis.mark(boxColor, **options)

def clear_marks():
    vis.clearMarks()
