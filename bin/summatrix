#!/usr/bin/env python-i
#
# SUMMATRIX (SUMMON Sparse Matrix Viewer)
#
# Example of using summon to visualize large sparse matrices.
#
# Example matrices are in summon/examples/summatrix/
# Matrix file formats:
#   *.mat   compress row (-r option)
#   *.imat  index matrix (-i option)
#   *.lmat  label matrix 
#

# TODO: implement find, and marking


import random
import sys

from summon.core import *
from summon import *
from summon import shapes, util
from summon.matrix import *


def parseColor(colorstr):
    return map(float, colorstr.split(','))
    

# command line options
options = [
    "matrix formats",
    ["r:", "comprow=", "comprow", "<compressed row matrix file>",
        {"single": True}],
    ["i:", "imat=", "imat", "<index matrix file>",
        {"single": True}],
    ["l:", "lmat=", "lmat", "<labeled sparse matrix file>",
        {"single": True}],
    ["d:", "dense=", "dense", "<dense matrix file>",
        {"single": True}],
    
    "labels",
    ["", "rlab=", "rowlabels", "<row labels>",
        {"single": True}],
    ["", "clab=", "collabels", "<col labels>", 
        {"single": True}],    
    ["", "rclab=", "rowcollabels", "<row & col labels>", 
        {"single": True}],
    
    "permutation",
    ["R:", "rperm=", "rperm", "<row permutation>",
        {"single": True}],
    ["C:", "cperm=", "cperm", "<col permutation>",
        {"single": True}],
    ["B:", "rcperm=", "rcperm", "<row & col permutation>",
        {"single": True}],

    ["o:", "order=", "order", "<label order>",
        {"single": True}],
    
    "clustering",
    ["", "rpart=", "rpart", "<row partition ids>",
        {"single": True}],
    ["", "cpart=", "cpart", "<col partition ids>",
        {"single": True}],
    ["", "rcpart=", "rcpart", "<row & col partition ids>",
        {"single": True}],

    
    "misc",
    ["s:", "sample=", "sample", "<sample fraction>",
        {"single": True,
         "parser": float}],
    ["c:", "color=", "color", "(solid|posneg|rainbow|filename)",
        {"single": True,
         "default": "rainbow"}],
    ["", "bgcolor=", "bgcolor", "r,g,b   0<=r<=1",
        {"single": True,
         "parser": parseColor,
         "default": (0,0,0)}],
    ["", "drawzeros", "drawzeros", "",
        {"single": True,
         "help": "a bool whether to explicitly draw zeros with the colormap"}],
    ["", "cutoff=", "cutoff", "<value>",
        {"default": -1e1000,
         "parser": float,
         "single": True}],
    ["", "style=", "style", "(points|quads)",
        {"single": True,
         "default": "points"}],
    ["", "loadvals", "loadvals", "",
        {"single": True}]
]


conf = util.parseOptions(sys.argv, options, resthelp="<python script>")



#######################################################################
# Main Execution
#

print "SUMMATRIX (SUMMON Matrix Visualizer)"
print "Matt Rasmussen 2005"
print

mat = Matrix()

# read permutations
if "rperm" in conf:
    mat.rperm = util.readInts(conf["rperm"])
elif "cperm" in conf:
    mat.cperm = util.readInts(conf["cperm"])
elif "rcperm" in conf:
    mat.rperm = util.readInts(conf["rcperm"])        
    mat.cperm = util.readInts(conf["rcperm"])

# read color
if conf["color"] == "posneg":
    mat.colormap = summon.PosNegColorMap()
elif conf["color"] == "rainbow":
    mat.colormap = summon.RainbowColorMap()
elif conf["color"] == "solid":
    mat.colormap = summon.SolidColorMap()
else:
    mat.colormap = summon.readColorMap(conf["color"])


if "order" in conf:
    mat.order = conf["order"]

# read matrix
matfile = "summatrix"
if "comprow" in conf:
    openCompRow(conf["comprow"], mat, conf)
    matfile = conf["comprow"]
elif "imat" in conf:
    openImat(conf["imat"], mat, conf)
    matfile = conf["imat"]
elif "lmat" in conf:
    if "order" in conf:
        openLabeledMatrix(conf["lmat"], mat, conf)
    else:
        openLabeledMatrix(conf["lmat"], mat, conf)
    matfile = conf["lmat"]
elif "dense" in conf:
    openDense(conf["dense"], mat)
    matfile = conf["dense"]
else:
    raise "no matrix specified"


# read labels
if "rowlabels" in conf:
    mat.rowlabels = util.readStrings(conf["rowlabels"])
if "collabels" in conf:
    mat.collabels = util.readStrings(conf["collabels"])
if "rowcollabels" in conf:
    mat.rowlabels = util.readStrings(conf["rowcollabels"])
    mat.collabels = mat.rowlabels


# read partitions
if "rpart" in conf:
    mat.rpart = util.readStrings(conf["rpart"])
if "cpart" in conf:
    mat.cpart = util.readStrings(conf["cpart"])
if "rcpart" in conf:
    mat.rpart = util.readStrings(conf["rcpart"])
    mat.cpart = mat.rpart 


# execute python script
for script in conf["REST"]:
    print "executing", script
    execfile(script)


viewer = MatrixViewer(mat, bgcolor=conf["bgcolor"], 
                           drawzeros=conf["drawzeros"], 
                           style=conf["style"])
viewer.show()
viewer.win.set_name(matfile)
