#!/usr/bin/env python-i
#
# SUMMATRIX (SUMMON Sparse Matrix Viewer)
#
# Example of using summon to visualize large sparse matrices.
#
# Example matrices are in summon/examples/summatrix/
# Matrix file formats:
#   *.mat   compress row (-r option)
#   *.imat  index matrix (-i option)
#   *.lmat  label matrix (-l option)
#   *.mat   dense matrix (-d option)
#

# TODO: implement find, and marking


# python libs
import optparse
import random
import sys

# summon libs
import summon
from summon.core import *
from summon import matrix
from summon import sumtree
from summon import shapes, util, treelib




# command line options
o = optparse.OptionParser()

g = optparse.OptionGroup(o, "Matrix input formats")
o.add_option_group(g)
g.add_option("-r", "--rmat", dest="comprow",
             metavar="<compressed row matrix file>",
             help="load a compressed row matrix file (*.mat)")
g.add_option("-i", "--imat", dest="imat", metavar="<index matrix file>",
             help="load a index matrix file (*.imat)")
g.add_option("-l", "--lmat", dest="lmat",
             metavar="<labeled sparse matrix file>",
             help="load a labeled matrix file (*.lmat)")
g.add_option("-d", "--dense", dest="dense", metavar="<dense matrix file>",
             help="load a dense matrix file (*.mat)")


g = optparse.OptionGroup(o, "Labels")
o.add_option_group(g)
g.add_option("", "--rlab", dest="rowlabels", metavar="<row labels>")
g.add_option("", "--clab", dest="collabels", metavar="<col labels>")
g.add_option("", "--rclab", dest="rowcollabels", metavar="<row & col labels>")


g = optparse.OptionGroup(o, "Permutation")
o.add_option_group(g)
g.add_option("-R", "--rperm", dest="rperm", metavar="<row permutation>")
g.add_option("-C", "--cperm", dest="cperm", metavar="<col permutation>")
g.add_option("-B", "--rcperm", dest="rcperm",
             metavar="<row & col permutation>")
g.add_option("-o", "--order", dest="order", metavar="<label order>",
             help="only used with label matrix")
    


g = optparse.OptionGroup(o, "Clustering")
o.add_option_group(g)
g.add_option("", "--rpart", dest="rpart", metavar="<row partition ids>")
g.add_option("", "--cpart", dest="cpart", metavar="<col partition ids>")
g.add_option("", "--rcpart", dest="rcpart",
             metavar="<row & col partition ids>")


g = optparse.OptionGroup(o, "Trees")
o.add_option_group(g)
g.add_option("", "--rptree", dest="rptree", metavar="<row parent tree file>")
g.add_option("", "--cptree", dest="cptree", metavar="<column parent tree file>")
g.add_option("", "--rtree", dest="rtree", metavar="<row tree newick file>")
g.add_option("", "--ctree", dest="ctree", metavar="<column tree newick file>")
g.add_option("", "--treelens", dest="treelens",
             action="store_true",
             default=False,
             help="use branch lengths in tree files")


g = optparse.OptionGroup(o, "Display")
o.add_option_group(g)
g.add_option("-L", "--showlabels", dest="showlabels",
             metavar="(inline,panels,none)",
             default="inline")
g.add_option("-c", "--color", dest="color",
             metavar="(solid|posneg|rainbow|filename)",
             default="rainbow",
             help="specify a colormap using a predefined map or "
                  "a custom map from a file")
g.add_option("", "--bgcolor", dest="bgcolor", metavar="r,g,b",
             default="0,0,0",
             help="specify the background color (default: black)\n"
                  "    Each value is between 0 and 1.")
g.add_option("", "--drawzeros", dest="drawzeros",
             action="store_true",
             default=False,
             help="flag for whether to explicitly draw zeros with the colormap")
g.add_option("", "--style", dest="style", metavar="(points|quads)",
             default="points",
             help="draw non-zeros using points (default) or quadrilaterals")
g.add_option("", "--winsize", dest="winsize", metavar="<width>x<height>",
             default="400x400",
             help="specify initial window size (default: 400x400)")


g = optparse.OptionGroup(o, "Sampling")
o.add_option_group(g)
g.add_option("-s", "--sample", dest="sample", metavar="<sample fraction>",
             type="float",
             help="choose a random subset of non-zeros to display (only for sparse matrices)")
g.add_option("", "--rsample", dest="rsample", metavar="<sample fraction>",
             type="float",
             default=False,
             help="choose a random subset of rows to display")
g.add_option("", "--csample", dest="csample", metavar="<sample fraction>",
             type="float",
             default=False,
             help="choose a random subset of columns to display")


g = optparse.OptionGroup(o, "Miscellaneous")
o.add_option_group(g)
g.add_option("", "--cutoff", dest="cutoff", metavar="<value>",
             default=-util.INF,
             type="float",
             help="if specified, only loads values greater than 'cutoff'")
g.add_option("", "--noloadvals", dest="noloadvals",
             action="store_true",
             default=False,
             help="save memory by not loading non-zeros for interactive display")




def parseColor(colorstr):
    """Parse <r>,<g>,<b> into a list of three floats"""
    return map(float, colorstr.split(','))

def parseSize(sizestr):
    """Parse <width>x<hieght> into a list of two ints"""
    return map(int, sizestr.split('x'))



# parse options
conf, args = o.parse_args()
conf.bgcolor = parseColor(conf.bgcolor)
conf.winsize = parseSize(conf.winsize)




#=============================================================================
# Main Execution
#

print "SUMMATRIX (SUMMON Matrix Visualizer)"
print "Matt Rasmussen 2005-2009"
print


# globals
# for each access in iteractive interpreter
mat = matrix.Matrix()
rtree = None
ctree = None


def part2perm(part):
    """Convert a partition to a simple permutation"""
    perm = range(len(part))
    perm.sort(key=lambda x: part[x])
    return perm


def read_perm(conf, mat):
    # read permutations
    if conf.rperm:
        mat.rperm = util.read_ints(conf.rperm)
    if conf.cperm:
        mat.cperm = util.read_ints(conf.cperm)
    if conf.rcperm:
        mat.rperm = util.read_ints(conf.rcperm)
        mat.cperm = util.read_ints(conf.rcperm)

    # needed for lmat
    if conf.order:
        mat.order = conf.order


def read_part(conf, mat):
    # read partitions
    if conf.rpart:
        mat.rpart = util.read_strings(conf.rpart)
    if conf.cpart:
        mat.cpart = util.read_strings(conf.cpart)
    if conf.rcpart:
        mat.rpart = util.read_strings(conf.rcpart)
        mat.cpart = mat.rpart 

    # setup default permutation from cluster ids
    if mat.rpart and not mat.rperm:
        mat.rperm = part2perm(mat.rpart)
        mat.rinv = util.invperm(mat.rperm)
    if mat.cpart and not mat.cperm:
        mat.cperm = part2perm(mat.cpart)
        mat.cinv = util.invperm(mat.cperm)


def read_labels(conf, mat):    
    # read labels
    if conf.rowlabels:
        mat.rowlabels = util.read_strings(conf.rowlabels)
    if conf.collabels:
        mat.collabels = util.read_strings(conf.collabels)
    if conf.rowcollabels:
        mat.rowlabels = util.read_strings(conf.rowcollabels)
        mat.collabels = mat.rowlabels

def read_colormap(conf, mat):
    # read colormap
    if conf.color == "posneg":
        mat.colormap = summon.PosNegColorMap()
    elif conf.color == "rainbow":
        mat.colormap = summon.RainbowColorMap()
    elif conf.color == "solid":
        mat.colormap = summon.SolidColorMap()
    else:
        mat.colormap = summon.readColorMap(conf.color)


def read_matrix(conf, mat):

    # read matrix
    if conf.comprow:
        matfile = conf.comprow
        format = "rmat"
    elif conf.imat:
        matfile = conf.imat
        format = "imat"
    elif conf.lmat:
        matfile = conf.lmat
        format = "lmat"
    elif conf.dense:
        matfile = conf.dense
        format = "dmat"
    else:
        raise Exception("no matrix specified")
        
    matrix.open_matrix(matfile, mat, 
                       loadvals=not conf.noloadvals,
                       sample=conf.sample,
                       rowsample=conf.rsample,
                       colsample=conf.csample,
                       minval=conf.cutoff,
                       format=format)

    # TODO: should this be pushed into lib?
    # modify permutations if row/col sampling is choosen
    if len(mat.rshow) < mat.nrows or len(mat.cshow) < mat.ncols:
        mat = mat.submatrix(util.sort(mat.rshow), util.sort(mat.cshow))

    return matfile


def read_trees(conf, mat):
    # read trees
    global rtree
    global ctree

    if conf.rptree:
        rtree = treelib.Tree()
        rtree.readParentTree(conf.rptree, labels=mat.rowlabels)
    if conf.cptree:
        ctree = treelib.Tree()
        ctree.readParentTree(conf.cptree, labels=mat.collabels)
    if conf.rtree:
        rtree = treelib.Tree()
        rtree.readNewick(conf.rtree)
    if conf.ctree:
        ctree = treelib.Tree()
        ctree.readNewick(conf.ctree)

    if rtree:
        leaves = rtree.leafNames()
        if mat.rowlabels == None:
            mat.rperm = map(int, leaves)
        else:
            lookup = util.list2lookup(mat.rowlabels)
            mat.rperm = util.mget(lookup, leaves)
        mat.rinv = util.invPerm(mat.rperm)
        
    if ctree:
        leaves = ctree.leafNames()
        if mat.collabels == None:
            mat.cperm = map(int, leaves)
        else:
            lookup = util.list2lookup(mat.collabels)
            mat.cperm = util.mget(lookup, leaves)
        mat.cinv = util.invPerm(mat.cperm)

read_perm(conf, mat)
read_part(conf, mat)
read_labels(conf, mat)
read_colormap(conf, mat)
matfile = read_matrix(conf, mat)
read_trees(conf, mat)


# TODO: remove?
# execute python scripts
for script in args:
    print "executing", script
    execfile(script)



# determine label settings
if conf.showlabels == "inline":
    showLabels = True
    showLabelWindows = False
elif conf.showlabels == "panels":
    showLabels = True
    showLabelWindows = True
elif conf.showlabels == "none":
    showLabels = False
    showLabelWindows = False
else:
    raise Exception("unknown showlabels setting '%s'" % conf.showlabels)


# create matrix viewer and display it
viewer = matrix.MatrixViewer(mat, bgcolor=conf.bgcolor, 
                             drawzeros=conf.drawzeros, 
                             style=conf.style,
                             showLabels=showLabels,
                             showLabelWindows=showLabelWindows,
                             winsize=conf.winsize,
                             title=matfile,
                             rtree=rtree,
                             ctree=ctree,
                             useTreeLens=(conf.treelens, conf.treelens))
util.tic("drawing matrix")
viewer.show()
util.toc()


#=============================================================================
# display globals

print
print "variables available:"
print "  mat    = matrix"
print "  viewer = matrix viewer"

if rtree:
    print "  rtree  = row tree"
if ctree:
    print "  ctree  = col tree"
print
