#!/usr/bin/env python-i
#
# SUMTREE (SUMMON Tree Visualizer)
#
# see summon/examples/sumtree/view_*.sh for examples
#


# python libs
import sys

# summon libs
from summon.core import *
from summon import sumtree
from summon import util
from summon import treelib


# command line options
options = [
 "Data options",
 ["p:", "ptree=", "ptree", "<ptree file>",
    {"single": True,
     "help": "load a tree in parent tree format"}],
 ["l:", "labels=", "labels", "<leaf labels file>",
    {"single": True,
     "help": "give leaf labels for parent tree format"}],
 ["n:", "newick=", "newick", "<newick file>",
    {"single": True,
     "help": "load a tree in newick format"}],
     
 "Display options",
 ["c:", "colormap=", "colormap", "<tree color map>",
    {"single": True,
     "help": "specify how to color branches of a tree"}],
 ["t:", "usedist=", "usedist", "<distance factor>",
    {"single": True,
     "default": 1.0,
     "parser": float,
     "help": "use distance information in tree (newick only)"}],
 ["L", "noshowlabels", "noshowlabels", "",
    {"single": True,
     "help": "disable leaf labels"}],
 ["", "layout=", "layout", "default|hierarchical",
    {"single": True,
     "default": "default",
     "help": "specifies how to layout the tree for drawing"}],
 ["V", "vertical", "vertical", "",
    {"single": True,
     "help": "display tree vertically"}],
 ["w:", "winsize=", "winsize", "<window width>x<window height>",
    {"single": True,
     "help": "set initial window size"}],
    
]



# parse args
conf = util.parseOptions(sys.argv, options)


#======================================================================
# Reading and Initialization
#



def readTree(conf):
    util.tic("reading input")

    tree = treelib.Tree()

    if "ptree" in conf:
        tree.readParentTree(conf["ptree"], conf["labels"])
        print "%s: %d nodes, %d leaves\n" % \
          (conf["ptree"], len(tree.nodes), len(tree.leaves()))
        
        
    elif "newick" in conf:
        tree.readNewick(conf["newick"])
        print "%s: %d nodes, %d leaves\n" % \
          (conf["newick"], len(tree.nodes), len(tree.leaves()))

    

    util.toc()    
    return tree


#=============================================================================
# title
print "SUMTREE (SUMMON Tree Visualizer)"
print "Matt Rasmussen 2005-2007"
print

# read
tree = readTree(conf)

# display tree
if "newick" in conf:
    filename = conf["newick"]
elif "ptree" in conf:
    filename = conf["ptree"]
    conf["usedist"] = 0

if "colormap" in conf:
    colormap = treelib.readTreeColorMap(conf["colormap"])
else:
    colormap = None

if "winsize" in conf:
    winsize = map(int, conf["winsize"].split("x"))
else:
    winsize = (400, 400)

if conf["layout"] == "default":
    layout = treelib.layoutTree(tree, conf["usedist"], 1)
elif conf["layout"] == "hierarchical":
    layout = treelib.layoutTreeHierarchical(tree, conf["usedist"], 1)
else:
    raise Exception("unknown tree layout")


vis = sumtree.SumTree(tree, name=filename, xscale=conf["usedist"], 
                      showLabels=not conf["noshowlabels"],
                      vertical=conf["vertical"],
                      colormap=colormap,
                      winsize=winsize,
                      layout=layout)
util.tic("drawing tree")
vis.show()
util.toc()



# export a few functions to the global scope
def find(name):
    return vis.find(name)

def mark(boxColor = color(1,0,0), **options):
    return vis.mark(boxColor, **options)

def clear_marks():
    vis.clearMarks()
